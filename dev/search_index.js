var documenterSearchIndex = {"docs":
[{"location":"#Cliquer.jl","page":"Home","title":"Cliquer.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia bindings for Cliquer. This finds cliques or independent sets in (possibly weighted) graphs.  It is much faster than the clique finder in Graphs.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# By default, it finds the maximum weight clique.\njulia> find_single_clique(cycle_graph(5))\n2-element Vector{Int64}:\n 2\n 3\n\n# By default, it finds all maximum weight cliques.  This can be configured.\njulia> find_all_cliques(cycle_graph(5))\n5-element Vector{Vector{Int64}}:\n [2, 3]\n [3, 4]\n [4, 5]\n [1, 2]\n [1, 5]","category":"page"},{"location":"#Reference","page":"Home","title":"Reference","text":"","category":"section"},{"location":"#Cliquer.find_all_cliques-Tuple{Function, Graphs.SimpleGraphs.AbstractSimpleGraph}","page":"Home","title":"Cliquer.find_all_cliques","text":"find_all_cliques(f::Function, g::Graphs.AbstractSimpleGraph; verbose::Union{Bool,Function}=false, minweight::Integer=0, maxweight::Integer=0, maximal::Bool=true, weights::Vector{<:Integer}=Vector{Int32}())::Int64\n\nFinds and all cliques meeting the given criteria (by default, the maximum cliques).  Calls the given callback for each clique.  Returns the number of cliques found.\n\nIf minweight=0, it searches for maximum-weight cliques.  If maxweight=0, there is no upper limit.  If verbose=true, progess messages will display; if verbose is a function, that function gets called for every recursion with a named tuple of status fields.\n\n\n\n\n\n","category":"method"},{"location":"#Cliquer.find_all_cliques-Tuple{Graphs.SimpleGraphs.AbstractSimpleGraph}","page":"Home","title":"Cliquer.find_all_cliques","text":"find_all_cliques(g::Graphs.AbstractSimpleGraph; verbose::Union{Bool,Function}=false, minweight::Integer=0, maxweight::Integer=0, maximal::Bool=true, weights::Vector{<:Integer}=Vector{Int32}())::Vector{Vector{Int64}}\n\nFinds and returns all cliques meeting the given criteria (by default, the maximum cliques).\n\nIf minweight=0, it searches for maximum-weight cliques.  If maxweight=0, there is no upper limit.  If verbose=true, progess messages will display; if verbose is a function, that function gets called for every recursion with a named tuple of status fields.\n\n\n\n\n\n","category":"method"},{"location":"#Cliquer.find_all_independent_sets-Tuple{Function, Graphs.SimpleGraphs.AbstractSimpleGraph}","page":"Home","title":"Cliquer.find_all_independent_sets","text":"find_all_independent_sets(f::Function, g::Graphs.AbstractSimpleGraph; verbose::Union{Bool,Function}=false, minweight::Integer=0, maxweight::Integer=0, maximal::Bool=true, weights::Vector{<:Integer}=Vector{Int32}())::Int64\n\nEquivalent to find_all_cliques(f, complement(g)).\n\n\n\n\n\n","category":"method"},{"location":"#Cliquer.find_all_independent_sets-Tuple{Graphs.SimpleGraphs.AbstractSimpleGraph}","page":"Home","title":"Cliquer.find_all_independent_sets","text":"find_all_independent_sets(g::Graphs.AbstractSimpleGraph; verbose::Union{Bool,Function}=false, minweight::Integer=0, maxweight::Integer=0, maximal::Bool=true, weights::Vector{<:Integer}=Vector{Int32}())::Vector{Vector{Int64}}\n\nEquivalent to find_all_cliques(complement(g)).\n\n\n\n\n\n","category":"method"},{"location":"#Cliquer.find_single_clique-Tuple{Graphs.SimpleGraphs.AbstractSimpleGraph}","page":"Home","title":"Cliquer.find_single_clique","text":"find_single_clique(g::Graphs.AbstractSimpleGraph; verbose::Union{Bool,Function}=false, minweight::Integer=0, maxweight::Integer=0, maximal::Bool=true, weights::Vector{<:Integer}=Vector{Int32}())\n\nFinds and returns a single clique meeting the given criteria (by default, a maximum clique).\n\nIf minweight=0, it searches for maximum-weight cliques.  If maxweight=0, there is no upper limit.  If verbose=true, progess messages will display; if verbose is a function, that function gets called for every recursion with a named tuple of status fields.\n\nReturns nothing if there is no clique matching the criteria.\n\n\n\n\n\n","category":"method"},{"location":"#Cliquer.find_single_independent_set-Tuple{Graphs.SimpleGraphs.AbstractSimpleGraph}","page":"Home","title":"Cliquer.find_single_independent_set","text":"find_single_independent_set(g::Graphs.AbstractSimpleGraph; verbose::Union{Bool,Function}=false, minweight::Integer=0, maxweight::Integer=0, maximal::Bool=true, weights::Vector{<:Integer}=Vector{Int32}())\n\nEquivalent to find_single_clique(complement(g)).\n\n\n\n\n\n","category":"method"}]
}
